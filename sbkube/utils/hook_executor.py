"""
Hook Executor for SBKube.

Î™ÖÎ†πÏñ¥ Î∞è Ïï±Î≥Ñ ÌõÖ Ïã§ÌñâÏùÑ Îã¥ÎãπÌïòÎäî Ïú†Ìã∏Î¶¨Ìã∞ Î™®Îìà.
"""

import os
import shlex
import subprocess
from pathlib import Path
from typing import Literal

from rich.console import Console

from sbkube.exceptions import SbkubeError

console = Console()

HookType = Literal[
    "pre_prepare",
    "post_prepare",
    "pre_build",
    "post_build",
    "pre_template",
    "post_template",
    "pre_deploy",
    "post_deploy",
    "on_deploy_failure",
]

CommandHookPhase = Literal["pre", "post", "on_failure"]


class HookExecutionError(SbkubeError):
    """Hook Ïã§Ìñâ Ï§ë Î∞úÏÉùÌïú Ïò§Î•ò."""

    pass


class HookExecutor:
    """
    Hook Ïã§Ìñâ Í¥ÄÎ¶¨Ïûê.

    Î™ÖÎ†πÏñ¥ ÏàòÏ§Ä Î∞è Ïï± ÏàòÏ§ÄÏùò ÌõÖÏùÑ Ïã§ÌñâÌïòÍ≥† Í≤∞Í≥ºÎ•º Ï≤òÎ¶¨Ìï©ÎãàÎã§.
    """

    def __init__(
        self,
        base_dir: Path,
        work_dir: Path | None = None,
        env: dict[str, str] | None = None,
        dry_run: bool = False,
        timeout: int = 300,
    ):
        """
        HookExecutor Ï¥àÍ∏∞Ìôî.

        Args:
            base_dir: ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨ (BASE_DIR)
            work_dir: ÌõÖ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ïã§ÌñâÌï† ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ (ÏùºÎ∞òÏ†ÅÏúºÎ°ú APP_CONFIG_DIR)
                     NoneÏù¥Î©¥ base_dir ÏÇ¨Ïö©. ÏÉÅÎåÄ Í≤ΩÎ°úÎäî Ïù¥ ÎîîÎ†âÌÜ†Î¶¨ Í∏∞Ï§ÄÏúºÎ°ú Ìï¥ÏÑùÎê®.
            env: Ï∂îÍ∞Ä ÌôòÍ≤ΩÎ≥ÄÏàò
            dry_run: dry-run Î™®Îìú ÌôúÏÑ±Ìôî Ïó¨Î∂Ä
            timeout: Î™ÖÎ†πÏñ¥ Ïã§Ìñâ ÌÉÄÏûÑÏïÑÏõÉ (Ï¥à)

        Example:
            # redis_dir/config.yamlÏù¥ ÏûàÎäî Í≤ΩÏö∞
            executor = HookExecutor(
                base_dir=Path("/project"),           # ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏
                work_dir=Path("/project/redis_dir"), # ÌõÖ Ïã§Ìñâ ÏúÑÏπò
            )
            # ÌõÖÏóêÏÑú "./scripts/pre-deploy.sh" Ïã§Ìñâ Ïãú
            # ‚Üí /project/redis_dir/scripts/pre-deploy.sh Ïã§Ìñâ
        """
        self.base_dir = base_dir
        self.work_dir = work_dir or base_dir
        self.env = env or {}
        self.dry_run = dry_run
        self.timeout = timeout

    def execute_command_hooks(
        self,
        hook_config: dict,
        hook_phase: CommandHookPhase,
        command_name: str = "",
    ) -> bool:
        """
        Î™ÖÎ†πÏñ¥ ÏàòÏ§Ä ÌõÖ Ïã§Ìñâ.

        Args:
            hook_config: hooks.{command} ÏÑ§Ï†ï (CommandHooks Ïù∏Ïä§ÌÑ¥Ïä§Ïùò dict ÌòïÌÉú)
            hook_phase: "pre", "post", "on_failure"
            command_name: Î™ÖÎ†πÏñ¥ Ïù¥Î¶Ñ (Î°úÍπÖÏö©)

        Returns:
            ÏÑ±Í≥µ Ïó¨Î∂Ä (Î™®Îì† Î™ÖÎ†πÏñ¥Í∞Ä ÏÑ±Í≥µÌïòÎ©¥ True)
        """
        if not hook_config or hook_phase not in hook_config:
            return True

        commands = hook_config.get(hook_phase, [])
        if not commands:
            return True

        console.print(
            f"[cyan]ü™ù Executing {hook_phase}-hook for command '{command_name}'...[/cyan]"
        )

        for cmd in commands:
            if not self._execute_single_command(cmd, hook_phase):
                return False

        console.print(f"[green]‚úÖ {hook_phase}-hook completed successfully[/green]")
        return True

    def execute_app_hook(
        self,
        app_name: str,
        app_hooks: dict | None,
        hook_type: HookType,
        context: dict | None = None,
    ) -> bool:
        """
        Ïï±Î≥Ñ ÌõÖ Ïã§Ìñâ.

        Args:
            app_name: Ïï± Ïù¥Î¶Ñ
            app_hooks: app.hooks ÏÑ§Ï†ï (AppHooks Ïù∏Ïä§ÌÑ¥Ïä§Ïùò dict ÌòïÌÉú)
            hook_type: "pre_deploy", "post_deploy" Îì±
            context: Ï∂îÍ∞Ä Ïª®ÌÖçÏä§Ìä∏ (namespace, release_name Îì±)

        Returns:
            ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        if not app_hooks or hook_type not in app_hooks:
            return True

        commands = app_hooks.get(hook_type, [])
        if not commands:
            return True

        console.print(
            f"[cyan]ü™ù Executing {hook_type} hook for app '{app_name}'...[/cyan]"
        )

        # Ïª®ÌÖçÏä§Ìä∏Î•º ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Ï£ºÏûÖ
        hook_env = self.env.copy()
        hook_env["SBKUBE_APP_NAME"] = app_name
        if context:
            hook_env.update(
                {f"SBKUBE_{k.upper()}": str(v) for k, v in context.items()}
            )

        for cmd in commands:
            if not self._execute_single_command(cmd, hook_type, hook_env):
                return False

        console.print(
            f"[green]‚úÖ {hook_type} hook for '{app_name}' completed successfully[/green]"
        )
        return True

    def _execute_single_command(
        self,
        command: str,
        hook_type: str,
        env: dict | None = None,
    ) -> bool:
        """
        Îã®Ïùº Î™ÖÎ†πÏñ¥ Ïã§Ìñâ.

        Args:
            command: Ïã§ÌñâÌï† Î™ÖÎ†πÏñ¥
            hook_type: ÌõÖ ÌÉÄÏûÖ (Î°úÍπÖÏö©)
            env: Ï∂îÍ∞Ä ÌôòÍ≤ΩÎ≥ÄÏàò

        Returns:
            ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        if self.dry_run:
            console.print(
                f"[yellow]üîç [DRY-RUN] Would execute hook: {command}[/yellow]"
            )
            return True

        console.print(f"  ‚ñ∂ Running: [dim]{command}[/dim]")

        try:
            # ÌôòÍ≤ΩÎ≥ÄÏàò Î≥ëÌï©
            full_env = os.environ.copy()
            full_env.update(self.env)
            if env:
                full_env.update(env)

            result = subprocess.run(
                shlex.split(command),
                shell=False,
                cwd=self.work_dir,
                env=full_env,
                capture_output=True,
                text=True,
                timeout=self.timeout,
            )

            if result.returncode != 0:
                console.print(f"[red]‚ùå Hook command failed: {command}[/red]")
                console.print(f"[red]   Exit code: {result.returncode}[/red]")
                if result.stderr:
                    console.print(f"[red]   Error: {result.stderr.strip()}[/red]")
                return False

            if result.stdout:
                for line in result.stdout.strip().split("\n"):
                    console.print(f"    {line}")

            return True

        except subprocess.TimeoutExpired:
            console.print(
                f"[red]‚ùå Hook command timed out (>{self.timeout}s): {command}[/red]"
            )
            return False

        except Exception as e:
            console.print(f"[red]‚ùå Hook execution error: {e}[/red]")
            return False
