[project]
name = "sbkube"
version = "0.1.10"
license = "MIT"
description = "k3s용 헬름+yaml+git 배포 자동화 CLI 도구"
authors = [{ name = "archmagece", email = "archmagece@users.noreply.github.com" }]
requires-python = "~=3.12"
readme = "README.md"

dependencies = [
  "click>=8.1",
  "pyyaml",
  "gitpython",
  "jinja2",
  "rich",
  "pytest>=8.3.5",
  "toml>=0.10.2",
  "jsonschema>=4.23.0",
  "pydantic>=2.7.1",
  "sqlalchemy>=2.0.0",
]

[project.scripts]
sbkube = "sbkube.cli:main_with_exception_handling"

[tool.setuptools]
packages = ["sbkube"]

[tool.hatch.build.targets.sdist]
include = ["sbkube"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "twine>=6.1.0",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "testcontainers[k3s]>=4.0.0",
    "kubernetes>=28.1.0",
    "faker>=22.0.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=sbkube",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
]

markers = [
    "unit: Unit tests that test individual components",
    "integration: Integration tests that test multiple components together",
    "e2e: End-to-end tests that test complete workflows",
    "performance: Performance tests that measure execution time and resource usage",
    "slow: Tests that take more than 5 seconds to run",
    "requires_k8s: Tests that require a Kubernetes cluster",
    "requires_helm: Tests that require Helm to be installed",
    "requires_network: Tests that require network access",
]

[tool.coverage.run]
branch = true
source = ["sbkube"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"