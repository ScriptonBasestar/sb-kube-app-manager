name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[test]"
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Run unit tests
      run: |
        source .venv/bin/activate
        pytest -v -m unit --cov=sbkube --cov-report=xml
    
    - name: Run integration tests (without K8s)
      run: |
        source .venv/bin/activate
        pytest -v -m "integration and not requires_k8s" --cov=sbkube --cov-append --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          .coverage

  integration-k8s:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[test]"
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Start k3s
      uses: AbsaOSS/k3d-action@v2
      with:
        cluster-name: "test-cluster"
        args: >-
          --agents 1
          --no-lb
          --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
    
    - name: Run Kubernetes integration tests
      run: |
        source .venv/bin/activate
        kubectl cluster-info
        pytest -v -m requires_k8s --cov=sbkube --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-k8s-integration

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[test]"
    
    - name: Run performance tests
      run: |
        source .venv/bin/activate
        pytest -v -m performance --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
    
    - name: Comment PR with performance results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const benchmark = JSON.parse(fs.readFileSync('benchmark.json', 'utf8'));
          
          let comment = '## Performance Test Results\n\n';
          comment += '| Test | Min | Max | Mean | Stddev |\n';
          comment += '|------|-----|-----|------|--------|\n';
          
          for (const bench of benchmark.benchmarks) {
            comment += `| ${bench.name} | ${bench.stats.min.toFixed(3)}s | ${bench.stats.max.toFixed(3)}s | ${bench.stats.mean.toFixed(3)}s | ${bench.stats.stddev.toFixed(3)}s |\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install ruff mypy types-PyYAML types-toml
    
    - name: Run ruff
      run: |
        source .venv/bin/activate
        ruff check sbkube tests
    
    - name: Run mypy
      run: |
        source .venv/bin/activate
        mypy sbkube --ignore-missing-imports