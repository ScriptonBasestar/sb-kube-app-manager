# Hooks Phase 4 예제: Hook as First-class App
#
# Phase 4 기능 시연:
# - cert-manager를 Helm으로 배포
# - HookApp으로 ClusterIssuers 배포 (독립적인 앱)
# - HookApp으로 Certificate 생성 및 검증 (의존성 체인)
# - HookApp은 prepare/build/template 단계를 건너뛰고 deploy 시에만 실행
#
# 실행 방법:
#   sbkube apply --app-dir examples/hooks-phase4 --namespace cert-manager
#
# Phase 4 특징:
# - HookApp은 독립적인 app type으로 관리
# - depends_on으로 다른 앱과의 의존성 설정
# - Phase 2/3의 모든 기능 재사용 (validation, dependency, rollback)
# - 앱 레벨에서 lifecycle 관리

namespace: cert-manager

apps:
  # Step 1: cert-manager 배포 (Helm)
  cert-manager:
    type: helm
    chart: jetstack/cert-manager
    version: v1.13.2
    values:
      - installCRDs: true
        global:
          leaderElection:
            namespace: cert-manager

  # Step 2: ClusterIssuers 배포 (HookApp)
  setup-issuers:
    type: hook  # Phase 4: HookApp
    depends_on:
      - cert-manager  # cert-manager가 먼저 배포되어야 함
    labels:
      app: cert-manager-setup
      component: issuers
      managed-by: sbkube
    annotations:
      description: "Let's Encrypt ClusterIssuers setup"
      version: "1.0.0"
    tasks:
      # Task 1: Production ClusterIssuer
      - type: manifests
        name: deploy-production-issuer
        files:
          - manifests/cluster-issuer-letsencrypt-prd.yaml
        validation:
          kind: ClusterIssuer
          name: letsencrypt-prd
          wait_for_ready: true
          timeout: 120
          conditions:
            - type: Ready
              status: "True"
        rollback:
          enabled: true
          on_failure: always
          commands:
            - kubectl delete clusterissuer letsencrypt-prd --ignore-not-found=true

      # Task 2: Staging ClusterIssuer
      - type: manifests
        name: deploy-staging-issuer
        files:
          - manifests/cluster-issuer-letsencrypt-stg.yaml
        validation:
          kind: ClusterIssuer
          name: letsencrypt-stg
          wait_for_ready: true
          timeout: 120
        rollback:
          enabled: true
          on_failure: always
          commands:
            - kubectl delete clusterissuer letsencrypt-stg --ignore-not-found=true

    # HookApp 레벨 rollback (모든 task 실패 시)
    rollback:
      enabled: true
      on_failure: always
      commands:
        - kubectl delete clusterissuer letsencrypt-prd letsencrypt-stg --ignore-not-found=true

  # Step 3: Certificate 생성 (HookApp)
  create-certificates:
    type: hook  # Phase 4: HookApp
    depends_on:
      - setup-issuers  # ClusterIssuer가 먼저 설정되어야 함
    labels:
      app: cert-manager-setup
      component: certificates
      managed-by: sbkube
    annotations:
      description: "Wildcard and API TLS certificates"
      version: "1.0.0"
    tasks:
      # Task 1: Wildcard Certificate 생성
      - type: inline
        name: create-wildcard-cert
        content:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: wildcard-cert
            namespace: default
          spec:
            secretName: wildcard-cert-tls
            issuerRef:
              name: letsencrypt-stg  # staging 환경 사용
              kind: ClusterIssuer
            dnsNames:
              - "*.example.com"
              - "example.com"
        validation:
          kind: Certificate
          name: wildcard-cert
          namespace: default
          wait_for_ready: true
          timeout: 300
        rollback:
          enabled: true
          on_failure: always
          commands:
            - kubectl delete certificate wildcard-cert -n default --ignore-not-found=true
            - kubectl delete secret wildcard-cert-tls -n default --ignore-not-found=true

      # Task 2: API Certificate 생성
      - type: inline
        name: create-api-cert
        content:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: api-cert
            namespace: default
          spec:
            secretName: api-cert-tls
            issuerRef:
              name: letsencrypt-stg
              kind: ClusterIssuer
            dnsNames:
              - "api.example.com"
        validation:
          kind: Certificate
          name: api-cert
          namespace: default
          wait_for_ready: true
          timeout: 300
        rollback:
          enabled: true
          on_failure: always
          commands:
            - kubectl delete certificate api-cert -n default --ignore-not-found=true
            - kubectl delete secret api-cert-tls -n default --ignore-not-found=true

    # HookApp 레벨 validation (모든 task 성공 후)
    validation:
      kind: Certificate
      namespace: default
      wait_for_ready: true
      timeout: 300

  # Step 4: 배포 검증 (HookApp)
  verify-deployment:
    type: hook  # Phase 4: HookApp
    depends_on:
      - create-certificates  # Certificate가 먼저 생성되어야 함
    labels:
      app: cert-manager-setup
      component: verification
      managed-by: sbkube
    annotations:
      description: "Post-deployment verification checks"
      version: "1.0.0"
    tasks:
      # Task 1: Certificate 상태 확인
      - type: command
        name: check-certificates
        command: |
          echo "Checking certificates..."
          kubectl get certificates -n default
          kubectl get certificaterequests -n default
          kubectl get secrets -n default | grep -E "(wildcard-cert-tls|api-cert-tls)"
        on_failure: warn  # 검증 실패 시 경고만

      # Task 2: Secret 존재 확인
      - type: command
        name: verify-secrets
        command: |
          echo "Verifying TLS secrets..."
          kubectl get secret wildcard-cert-tls -n default -o jsonpath='{.data.tls\.crt}' | base64 -d | openssl x509 -noout -text | grep -A 1 "Subject:"
          kubectl get secret api-cert-tls -n default -o jsonpath='{.data.tls\.crt}' | base64 -d | openssl x509 -noout -text | grep -A 1 "Subject:"
        retry:
          max_attempts: 3
          delay: 10
        on_failure: warn

      # Task 3: ClusterIssuer 상태 확인
      - type: command
        name: verify-issuers
        command: |
          echo "Verifying ClusterIssuers..."
          kubectl get clusterissuers
          kubectl describe clusterissuer letsencrypt-prd | grep -A 3 "Status:"
          kubectl describe clusterissuer letsencrypt-stg | grep -A 3 "Status:"
        on_failure: warn

    # HookApp 레벨 dependency (다른 HookApp과의 의존성)
    dependency:
      depends_on:
        - create-certificates
      wait_for:
        - kind: Certificate
          namespace: default
          label_selector: "cert-manager.io/issuer-kind=ClusterIssuer"
          condition: Ready
          timeout: 300
